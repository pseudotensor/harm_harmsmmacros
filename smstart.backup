startup 0 #
          smstart
          #
default 0 #
          smstart
          #
smstart 0 # the startup macro for my SM sessions.
        # file types from global.h
	load twod.m
	load more.m
	define PTYPE     1 #// global par file
        define GRIDTYPE  2
        define DTYPE     3 #// dump
        define FLTYPE    4 #// floor
        define NPTYPE    5 #// np
        define AVG2DTYPE 6
        define AVG1DTYPE 7
        define ENERTYPE  8
        define LOSSTYPE  9
        define SPTYPE    10
        define TSTYPE    11
        define LOGDTTYPE 12 
        define STEPTYPE  13
        define PERFTYPE  14
        define ADTYPE    15 #// same as dump except filename
        define PDTYPE    16 #// same as dump except filename
        define CALCTYPE  17 #// arbitrary calcs during pp
        define FIELDLINETYPE  18 #// fieldline calcs during pp
	define MODETYPE 19 #// mode dump
        define EXPANDTYPE 50 #// used to signify doing pp expansion
        define NPCOMPUTETYPE 33 #// used to signify want to compute np before output
	define ZEUSHSTTYPE 100
	defaults
         #
der        4      # derivative (e.g. der t min1 td min1d)
                  set _length=dimen($1)
                  echo der
                  define length (_length)
                  set $3=0,$length-1,1
                  set $4=0,$length-1,1
                  do ii=1,$length-1,1 {
                     set $3[$ii]=0.5*($1[$ii-1]+$1[$ii]) 
		     set $4[$ii]=($2[$ii]-$2[$ii-1])/($1[$ii]-$1[$ii-1])
  		  }
                  # hack to allow derivative same size as function, should really linearly interpolate function to get this
		  set $3[0]=$1[0]
                  set $4[0]=$4[1]
                  # hack to avoid problem at end with same time data
                  set $4[$length-1]=$4[$length-2]
                  #
grad       4      # (e.g. grad  pot gpot 3 2) div <fun> <newfun> <coord> <grid>
	          # <coord> 3->spc 2->cyl 1->cart
                  # <grid> 2 -> b-grid, 1 -> a-grid for source data
                  # currently assume a-grid source data
                  if($3==1){\
                    set newf1=$1
                    set newf2=$1
                    #set newf3=$1
                    set f1=x12/x12
                    set f2=x22/x22
                    #set f3=x32/x32
                  }\
                  else{\
                    if($3==3){\
			if($4==1){\
                         set newf1=$1
                         set newf2=$1
                         #set newf3=$1
                         set f1=x1/x1
                         set f2=1/(g32)
                         #set f3=1/(g32*g42)
	                 define dxx1 dx1
	                 define dxx2 dx2
                        }
	                if($4==2){\
                         set newf1=$1
                         set newf2=$1
                         #set newf3=$1
                         set f1=x1/x1
                         set f2=1/(g3)
                         #set f3=1/(g3*g4)
	                 define dxx1 dx12
	                 define dxx2 dx22
                        }
                    }
                  }
                  set $2x=0,$nx*$ny-1,1
                  set $2y=0,$nx*$ny-1,1
                  set $2z=0,$nx*$ny-1,1
	          set $2x=$2x*0
	          set $2y=$2y*0
	          set $2z=$2z*0
                  do kk=0,$nx*$ny-1,1 {
	                if( (INT($kk%$nx)!=$nx-1)&&($kk<($ny-2)*$nx+$nx) ){\
	        	   set $2x[$kk]=f1[$kk]*(newf1[$kk+1]-newf1[$kk])/$dxx1[$kk]
			   set $2y[$kk]=f2[$kk]*(newf2[$kk+$nx]-newf2[$kk])/$dxx2[$kk]
                        }\
                        else{\
                           if(INT($kk%$nx)==$nx-1){ set $2x[$kk]=$2x[$kk-1] set $2y[$kk]=$2y[$kk-1] }
                           if($kk>($ny-2)*$nx+($nx-1)){ set $2x[$kk]=$2x[$kk-$nx] set $2y[$kk]=$2y[$kk-$nx] }
                        }
	                #+f3[$kk]*(newf3[$kk+$nx*$ny]-newf3[$kk])/$dxx3[$kk]
  		  }
                  #
vdotgradv   5     # (e.g. vdotgradv  vtodot v result 3 2) fdotgradv <vec\cdot> <v> <newv> <coord> <grid>
	          # gradient of vector
	          # <coord> 3->spc 2->cyl 1->cart
                  # <grid> 2 -> b-grid, 1 -> a-grid for source data
                  # currently assume a-grid source data
		  # just normal gradient with additional curvature terms in spc only
	          grad $2x tempx $4 $5
	          grad $2y tempy $4 $5
	          grad $2z tempz $4 $5
		  # v\cdot(\nablda v)
                  # now, e.g. tempxy means x component, y-dir derivative
                  # no derivatives in z dir
		  set $3x=$1x*tempxx+$1y*tempxy
		  set $3y=$1x*tempyx+$1y*tempyy
		  set $3z=$1x*tempzx+$1y*tempzy
                  # additional curvature terms if spc
		  if($4==3){\
		   set $3x=$3x-$1y*($2y/g22)-$1z*$2z/g32
		   set $3y=$3y+$1y*($2x/g22)-$1z*($2z*dg42/(g22*g42))
		   set $3z=$3z+$1z*($2x/g32+$2y*dg4/(g22*g42))
                  }
                  #
div       5       # (e.g. div  v dv 3 2 0) div <fun> <newfun> <coord> <grid> <diffvol>
	          # <coord> 3->spc 2->cyl 1->cart
                  # <grid> 2 -> b-grid, 1 -> a-grid for source data
                  # currently assume a-grid source data
                  # <diffvol> whether to use diff=0 or volume=1 method
                  if($3==1){\
                    set newf1=$1x
                    set newf2=$1y
                    set newf3=$1z
                    set f1=x12/x12
                    set f2=x22/x22
                    set f3=x32/x32
                    set dx1temp=dx1
                    set dx2temp=dx2
                    set dx3temp=dx3
                  }\
                  else{\
                    if($3==3){\
                     if($5==0){\
                      set newf1=$1x*g2*g3
                      set newf2=$1y*g4
                      set newf3=$1z
                      set f1=1/(g22*g32)
                      set f2=1/(g32*g42)
                      set f3=1/(g32*g42)
                      set dx1temp=dx1
                      set dx2temp=dx2
                      set dx3temp=dx3
                     }\
                     else{\
                      set newf1=$1x*g2*g3
                      set newf2=$1y*g4
                      set newf3=$1z
                      set f1=dx1/dx1
                      set f2=1/(g32)
                      set f3=1/(g32*g42)
                      set dx1temp=dvl1
                      set dx2temp=dvl2
                      set dx3temp=dx3
                     }
                    }
                  }
                  set $2=0,$nx*$ny*$nz-1,1
                  do kk=0,$nx*$ny*$nz-1,1 {
		   set indexi=INT($kk%$nx)
		   set indexj=INT(($kk%($nx*$ny))/$nx)
		   set indexk=INT($kk/($nx*$ny))
	                if( ((indexi!=$nx-1)||($nx==1))&&((indexj!=$ny-1)||($ny==1))&&((indexk!=$nz-1)||($nz==1)) ){\
	                   set $2[$kk]=0
	                   if($nx>1){\
	        	    set $2[$kk]=$2[$kk]+f1[$kk]*(newf1[$kk+1]-newf1[$kk])/dx1temp[$kk]
                           }
                           if($ny>1){\
                            set $2[$kk]=$2[$kk]+f2[$kk]*(newf2[$kk+$nx]-newf2[$kk])/dx2temp[$kk]
                           }
                           if($nz>1){\
                             if($DODIV3==1){\
	                      set $2[$kk]=$2[$kk]+f3[$kk]*(newf3[$kk+$nx*$ny]-newf3[$kk])/dx3temp[$kk]
                             }
                           }
                        }\
                        else{\
			   # just copy over outer layer
                           if(($nx>1)&&(indexi==$nx-1)){ set $2[$kk]=$2[$kk-1] }
                           if(($ny>1)&&(indexj==$ny-1)){ set $2[$kk]=$2[$kk-$nx] }
                           if(($nz>1)&&(indexk==$nz-1)){ set $2[$kk]=$2[$kk-$nx*$ny] }
                        }
  		  }
                  #
curl       4       # (e.g. curl vecin vecout 2) div <fun> <newfun> <source grid>
                  # not setup since grid source location is funny
                  #
                  #
                  #
                  # assumes coord stuff in grid data
                  #
                  set newa1=$1x*g12
                  set newa2=$1y*g22
	          set newa3=$1z*g32*g42
                  set f2=1/(g42)
                  set f3=1/(g32*g42)
                  #
                  set $2=0,$nx*$ny-1,1
                  do kk=0,$nx*$ny-1,1 {
	                if( (INT($kk%$nx)!=$nx-1)&&($kk<($ny-2)*$nx+($nx-1)) ){\
	        	   set $2[$kk]=f1[$kk]*(newf1[$kk+1]-newf1[$kk])/dx1[$kk]+f2[$kk]*(newf2[$kk+$nx]-newf2[$kk])/dx2[$kk]
                        }\
                        else{\
                           if(INT($kk%$nx)==$nx-1){ set $2[$kk]=$2[$kk-1] }
                           if($kk>=($ny-2)*$nx+($nx-1)){ set $2[$kk]=$2[$kk-$nx] }
                        }
	                #+f3[$kk]*(newf3[$kk+$nx*$ny]-newf3[$kk])/dx3[$kk]
  		  }
                  # above is hack to allow derivative same size as function, should really linearly interpolate function to get this
                  #
                  #
fieldint  2       # (e.g. fieldit b aphi)
	          # <coord> 3->spc 2->cyl 1->cart
                  # <grid> 2 -> b-grid, 1 -> a-grid for source data
                  # currently assume b-grid source data
                  set $2=0,$nx*$ny-1,1
	          set A=-$1y*g32*g42
	          set B=$1x*g22*g32*g42
	          set differA=A*dx1
	          set differB=B*dx2
                  do kk=0,$nx*$ny-1,1 {
			   set temp=differB if((i==$kk%$nx)&&(j<=$kk/$nx))
			   set temp2=differA if((i<=$kk%$nx)&&(j==0))
	        	   set $2[$kk]=SUM(temp)+SUM(temp2)
  		  }
                  # final norm factor(messes things up?)
	          #set $2=$2/(x12*g42)
                  #
                  #
fftreallim 7       # (eg. fftreallim 1 td min1d freq min1dfpow 10000 20000)
                   # assume all have same dimension
                   #set itreal=dimen($3)
                   set itin=$6
                   set itout=$7
                   set it=$7-$6+1
                   set crap=0,it-1,1
                   set complex=crap*0
                   set deltat=(t[itout]-t[itin])
                   set delt=(t[itout]-t[itin])/it
                   #set $4=1/4000*(-0.5*it/deltat+crap/deltat)
                   #set $4=-0.5*it*deltat+crap*deltat
                   set $4=1,it,1
                   set realin=1,it,1
                   set jj=0
                   do ii=0,it/2-1,1 {
		     define itj (jj)
                      set $4[$ii]=-$itj/deltat
                      set realin[$ii]=$3[$ii+itin]
                      set jj=jj+1
		   }
                   set jj=0
                   if(it/2-INT(it/2)>.001){ set doit=it} else{set doit=it-1} 
                   do ii=it/2,doit,1 {
		     define itj (jj)
                      set $4[$ii]=0.5*it/deltat-$itj/deltat
                      set realin[$ii]=$3[$ii+itin]
                      set jj=jj+1
            	   }
                   fft $1 realin complex outreal outcomplex
                   set $5= outreal**2+outcomplex**2
fftreal 5          # (eg. fftreal 1 td min1d freq min1dfpow)
                   # assume all have same dimension
                  set inneri=0
	          set outeri=dimen($3)-1
                  fftreallim $1 $2 $3 $4 $5 inneri outeri
                  #
integrate  4      # (e.g. integrate td min1d t min1)
                  set _length=dimen($1)
                  define length (_length)
                  set $3=0,$length-1,1
                  set $4=0,$length-1,1
                  do ii=1,$length-1,1 {
                     set $3[$ii]=0.5*($1[$ii-1]+$1[$ii]) 
		     set $4[$ii]=($2[$ii]-$2[$ii-1])*($1[$ii]-$1[$ii-1])
  		  }
                  # hack to allow derivative same size as function, should really linearly interpolate function to get this
		  set $3[0]=$1[0]
                  set $4[0]=$4[1]
                  #
runabs     4      # running integrated absolute value (.e.g runabs t min1 ta min1a)
                  set _length=dimen($1)
                  define length (_length)
                  set $3=0,$length-1,1
                  set $4=0,$length-1,1
	          # hack to allow recursive add
		  set $3[0]=$1[0]
                  set $4[0]=0
                  do ii=1,$length-1,1 {
                     set $3[$ii]=0.5*($1[$ii-1]+$1[$ii]) 
		     set $4[$ii]=ABS($2[$ii]-$2[$ii-1])+$4[$ii-1]
  		  }
                  #
avg 3		  # average: (e.g. avg td min1d min1davg)
                  set _length=dimen($1)
                  define length (_length)
	          avglim $1 $2 $3 0 $length
                  #
avglim 5	  # average: (e.g. avglim td min1d min1davg 20000 30000)
                  set _length=$5
                  define length (_length)
                  set temptime=0
                  set $3=1,1,1
		  set $3[0]=0
                  do ii=$4+1,$length-1,1 {
                     set tempdt=($1[$ii]-$1[$ii-1]) 
                     set temptime=temptime+tempdt
		     set $3=$3+$2[$ii]*tempdt
  		  }
                  set $3=$3/temptime
                  set tempaverage=$3
                  print '%g\n' {tempaverage}
                  #
pdimen 1          # print dimension (e.g. pdimen td)
                  set tempdimen=dimen($1)
                  print '%g\n' {tempdimen}
                  #
rdraft            #
                  define finaldraft (0)
                  define PLOTLWEIGHT (1)
                  define NORMLWEIGHT (1)
                  lweight $NORMLWEIGHT
                  ltype 0
 	          expand 1.00001
                  location 5000 31000 3500 31000
fdraft            #
                  define finaldraft (1)
                  define PLOTLWEIGHT (5)
                  define NORMLWEIGHT (3)
                  expand 1.5
	          ltype 0
                  lweight $NORMLWEIGHT
	          location 5000 31000 3500 31000
                  #LOCATION $($gx1 + 1000) $gx2 $gy1 $gy2
                  #                  
mypoints 2        #
		  lweight $PLOTLWEIGHT
                  if(!($finaldraft)){\
                   #points $1 $2
                  }
                  connect $1 $2
		  lweight $NORMLWEIGHT
defaults          # go back to defaults
	          if($?npdone == 0){\
		   define npdone (0)
	          }
	        define filetype (1)
       		 rdraft
                define LOOPTYPE (3) # used recently alot
                define COORD (1)
                define COMPDIM (3)
                define DODIV3 (1)
	        expand 1.00001
	        define PLANE (3)
		define PLOTERASE (1)
		define CONSTLEVELS (0)
		define ANIMSKIP (1)
		define SOLIDCONTOURS (0)
		define SKIPFACTOR (1)
     		define PRINTTO (0)
    	    	define AVG1DWHICH (2)
      		  define DOCALCS (1)
	          notation -2 2 -2 2
		  define loginterprho 0
                  ticksize 0 0 0 0
                  if(!($finaldraft)){\
                   rdraft
                  }\
                  else{ fdraft }
	          define cres (15) # see plc
	          ctype default
	          window 1 1 1 1
	          location 5000 31000 3500 31000
shrink3  8         # assumes x12,x22 are original coords, $nx $ny are original sizes
                   # shrink3 <oldfun> <newx1> <newx2> <newfun> <xl> <xh> <yl> <yh>
                   # default(0) to not use limits on sm line
                   define txl ($5)
                   define txh ($6)
                   define tyl ($7)
                   define tyh ($8)
                   # determine index range from requested numerical range
                   set flipi=0
                   set flipo=0
                   do kk=0,$nx-1,1{
                     if( (x12[$kk]>=$txl)&(flipi==0)){ set tempxl=$kk set flipi=1}
                     if( (x12[$kk]>=$txh)&(flipo==0)){ set tempxh=$kk set flipo=1}
                   }
                   if(flipi==0){ set tempxl=0 }
                   if(flipo==0){ set tempxh=$nx-1 }
                   set flipi=0
                   set flipo=0
                   do kk=0,$ny-1,1{
                     if( (x22[$kk*$nx]>=$tyl)&(flipi==0)){ set tempyl=$kk set flipi=1}
                     if( (x22[$kk*$nx]>=$tyh)&(flipo==0)){ set tempyh=$kk set flipo=1}
                   }
                   if(flipi==0){ set tempyl=0 }
                   if(flipo==0){ set tempyh=$ny-1 }
                   set temprnx=(tempxh-tempxl+1)
                   set temprny=(tempyh-tempyl+1)
                   define rxl (tempxl)
                   define rxh (tempxh)
                   define ryl (tempyl)
                   define ryh (tempyh)
                   define rnx (temprnx)
                   define rny (temprny)
	           set iiold=1,$nx*$ny,1
                   set ixold=(iiold - $nx*int((iiold-0.5)/$nx) - 1)
                   set iyold=((int((iiold-0.5)/$nx) ))
                   set ii=1,$rnx*$rny,1
                   set ix=(ii - $rnx*int((ii-0.5)/$rnx) - 1)
                   set iy=((int((ii-0.5)/$rnx) ))
                   set $2=x12 if( (ixold>=$rxl)&(ixold<=$rxh)&(iyold>=$ryl)&(iyold<=$ryh))
                   set $3=x22 if( (ixold>=$rxl)&(ixold<=$rxh)&(iyold>=$ryl)&(iyold<=$ryh))
                   set $4=$1 if( (ixold>=$rxl)&(ixold<=$rxh)&(iyold>=$ryl)&(iyold<=$ryh))
                   #
reduce   5         # (e.g. reduce td min1d tdr min1dr 10)
                   set reduction=($5)
                   define reductiondef (reduction)
                   echo reduced by $reductiondef
                   set _length=dimen($1)
                   define length (_length)
                   set $3=0,$length/$5-1,1
                   set $4=0,$length/$5-1,1
                   do i=0,$length/$5-1,1 {
                      set $3[$i]=$1[$i*$5]
		      set $4[$i]=$2[$i*$5]
  		   }
                   #
shrink2  6         # (e.g. shrink   td min1d tds min1ds 0 1E5)
                   set _length=dimen($1)
                   define length (_length)
		   # determine index range from requested numerical range
                   set flipi=0
                   set flipo=0
                   do kk=0,$length-1,1{
                     if( ($1[$kk]>=$5)&(flipi==0)){ set tempxl=$kk set flipi=1}
                     if( ($1[$kk]>=$6)&(flipo==0)){ set tempxh=$kk set flipo=1}
                   }
                   if(flipi==0){ set tempxl=0 }
                   if(flipo==0){ set tempxh=$length-1 }
                   set temprnx=(tempxh-tempxl+1)
                   define rxl (tempxl)
                   define rxh (tempxh)
                   define rnx (temprnx)
                   set ix=0,$length-1,1
                   set $3=$1 if( (ix>=$rxl)&(ix<=$rxh))
                   set $4=$2 if( (ix>=$rxl)&(ix<=$rxh))
                   #
